{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sinem Morzambak\\\\Desktop\\\\adres-defterim\\\\src\\\\context.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; //1. first make a new context \n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  //payload is just some data that has been sent along with the action\n  switch (action.type) {\n    case 'DELETE_CONTACT':\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      };\n\n    case 'ADD_CONTACT':\n      return { ...state,\n        contacts: [action.payload, ...state.contacts]\n      };\n\n    case 'UPDATE_CONTACT':\n      return { ...state,\n        contacts: state.contacts.map(contact => {\n          return contact.id === action.payload.id ? contact = action.payload : contact;\n        })\n      };\n\n    default:\n      return state;\n  }\n}; //2. provider component is where your entire data lives.\n\n\nexport class Provider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      contacts: [],\n      dispatch: action => {\n        this.setState(state => reducer(state, action));\n      }\n    };\n  }\n\n  //Lifecycle methods\n  async componentDidMount() {\n    /*axios.get('https://jsonplaceholder.typicode.com/users')\r\n    .then(res=>this.setState({contacts:res.data}));*/\n    //USing async await\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n    this.setState({\n      contacts: res.data\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Context.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, this.props.children);\n  }\n\n}\nexport const Consumer = Context.Consumer;","map":{"version":3,"names":["React","Component","axios","Context","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","componentDidMount","res","get","data","render","props","children","Consumer"],"sources":["C:/Users/Sinem Morzambak/Desktop/adres-defterim/src/context.js"],"sourcesContent":["import React,{Component} from 'react';\r\nimport axios from 'axios';\r\n//1. first make a new context \r\nconst Context = React.createContext();\r\nconst reducer =(state,action)=>\r\n{\r\n    //payload is just some data that has been sent along with the action\r\n    switch(action.type)\r\n    {\r\n        case 'DELETE_CONTACT':return {\r\n            ...state,\r\n            contacts :state.contacts.filter(contact=>contact.id!== action.payload)\r\n                };\r\n            \r\n            case 'ADD_CONTACT':return {\r\n            ...state,\r\n            contacts :[action.payload,...state.contacts]\r\n                };\r\n            \r\n            case 'UPDATE_CONTACT':return {\r\n            ...state,\r\n            contacts :state.contacts.map(contact=>\r\n                {\r\n                return contact.id===action.payload.id?(contact=action.payload):contact;\r\n                \r\n            })\r\n                };\r\n        default:return state; \r\n}\r\n};\r\n\r\n//2. provider component is where your entire data lives.\r\nexport class Provider extends Component{\r\n     state=\r\n        {\r\n        \r\n    contacts:[],\r\n         \r\n         dispatch :action=>\r\n         {\r\n         this.setState(state=>reducer(state,action))\r\n     }\r\n    };\r\n\r\n//Lifecycle methods\r\nasync componentDidMount()\r\n{\r\n    /*axios.get('https://jsonplaceholder.typicode.com/users')\r\n    .then(res=>this.setState({contacts:res.data}));*/\r\n    \r\n    //USing async await\r\n    \r\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n    this.setState({contacts:res.data});\r\n}\r\nrender()\r\n{\r\n    return(\r\n        <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n        </Context.Provider>\r\n        )\r\n}\r\n}\r\n\r\nexport const Consumer = Context.Consumer;"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,aAAN,EAAhB;;AACA,MAAMC,OAAO,GAAE,CAACC,KAAD,EAAOC,MAAP,KACf;EACI;EACA,QAAOA,MAAM,CAACC,IAAd;IAEI,KAAK,gBAAL;MAAsB,OAAO,EACzB,GAAGF,KADsB;QAEzBG,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAsBC,OAAO,IAAEA,OAAO,CAACC,EAAR,KAAcL,MAAM,CAACM,OAApD;MAFe,CAAP;;IAKlB,KAAK,aAAL;MAAmB,OAAO,EAC1B,GAAGP,KADuB;QAE1BG,QAAQ,EAAE,CAACF,MAAM,CAACM,OAAR,EAAgB,GAAGP,KAAK,CAACG,QAAzB;MAFgB,CAAP;;IAKnB,KAAK,gBAAL;MAAsB,OAAO,EAC7B,GAAGH,KAD0B;QAE7BG,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeK,GAAf,CAAmBH,OAAO,IAChC;UACA,OAAOA,OAAO,CAACC,EAAR,KAAaL,MAAM,CAACM,OAAP,CAAeD,EAA5B,GAAgCD,OAAO,GAACJ,MAAM,CAACM,OAA/C,GAAwDF,OAA/D;QAEH,CAJS;MAFmB,CAAP;;IAQ1B;MAAQ,OAAOL,KAAP;EApBZ;AAsBH,CAzBD,C,CA2BA;;;AACA,OAAO,MAAMS,QAAN,SAAuBd,SAAvB,CAAgC;EAAA;IAAA;IAAA,KAClCK,KADkC,GAE/B;MAEJG,QAAQ,EAAC,EAFL;MAICO,QAAQ,EAAET,MAAM,IAChB;QACA,KAAKU,QAAL,CAAcX,KAAK,IAAED,OAAO,CAACC,KAAD,EAAOC,MAAP,CAA5B;MACH;IAPE,CAF+B;EAAA;;EAYvC;EACuB,MAAjBW,iBAAiB,GACvB;IACI;AACJ;IAEI;IAEA,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAU,4CAAV,CAAlB;IACA,KAAKH,QAAL,CAAc;MAACR,QAAQ,EAACU,GAAG,CAACE;IAAd,CAAd;EACH;;EACDC,MAAM,GACN;IACI,oBACI,oBAAC,OAAD,CAAS,QAAT;MAAkB,KAAK,EAAE,KAAKhB,KAA9B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACC,KAAKiB,KAAL,CAAWC,QADZ,CADJ;EAKH;;AA9BsC;AAiCvC,OAAO,MAAMC,QAAQ,GAAGtB,OAAO,CAACsB,QAAzB"},"metadata":{},"sourceType":"module"}